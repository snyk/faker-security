---
version: 2.1

orbs:
  prodsec: snyk/prodsec-orb@1

parameters:
  poetry-version:
    # pinned due to poetry issues on circleci
    # https://github.com/python-poetry/poetry/issues/7184#
    type: string
    default: "1.2.2"

defaults_python: &defaults_python
  resource_class: small
  docker:
    - image: "cimg/python:3.10"

executors:
  linters:
    docker:
      - image: "python:3.10-alpine"
  python311:
    docker:
      - image: "cimg/python:3.11"
  python310:
    docker:
      - image: "cimg/python:3.10"
  python39:
    docker:
      - image: "cimg/python:3.9"
  python38:
    docker:
      - image: "cimg/python:3.8"

jobs:
  security-scans:
    <<: *defaults_python
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install Poetry
          command: >
            pipx install poetry==<<pipeline.parameters.poetry-version>>
      - run:
          name: Install dependencies and project in dev mode
          command: poetry install
      - prodsec/security_scans:
          mode: auto
  lint:
    parameters:
      executor_name:
        type: executor
    executor: << parameters.executor_name >>
    steps:
      - run:
          name: Install requirements
          command: |
            apk update
            apk add ruby go git
      - run:
          name: Install pre-commit
          command: pip install pre-commit==2.17.0
      - checkout
      - run:
          name: Generate cache key
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            python --version --version >> pre-commit-cache-key.txt
      - restore_cache:
          key: pre-commit-hooks-{{ checksum "pre-commit-cache-key.txt" }}
      - run:
          name: Install hooks
          command: pre-commit install --install-hooks
      - save_cache:
          paths:
            - ~/.cache/pre-commit
          key: pre-commit-hooks-{{ checksum "pre-commit-cache-key.txt" }}
      - run:
          name: Run linters
          command: pre-commit run --all-files
  test:
    description: Run Tests for a specific python version
    parameters:
      executor_name:
        type: executor
    executor: << parameters.executor_name >>
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install Poetry
          command: >
            curl -sSL https://install.python-poetry.org
            | POETRY_VERSION=<<pipeline.parameters.poetry-version>> python3 -
      - run:
          name: Install dependencies and project in dev mode
          command: poetry install
      - run:
          name: Run tests
          command: poetry run pytest

  build_and_release:
    description: Build and release new version of the package to PyPi
    executor: python310
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install Poetry
          command: >
            curl -sSL https://install.python-poetry.org
            | POETRY_VERSION=<<pipeline.parameters.poetry-version>> python3 -
      - run:
          name: Configure Poetry PyPi token
          command: |
            poetry config pypi-token.pypi ${PYPI_TOKEN}
      - run:
          name: Release and Publish to PyPI
          command: |
            poetry publish --build --no-interaction

workflows:
  version: 2
  test:
    jobs:
      - lint:
          name: Run Linters
          executor_name: linters
          context: snyk-security-rnd
      - test:
          name: Run Tests - python 3.11
          executor_name: python311
          context: snyk-security-rnd
      - test:
          name: Run Tests - python 3.10
          executor_name: python310
          context: snyk-security-rnd
      - test:
          name: Run Tests - python 3.9
          executor_name: python39
          context: snyk-security-rnd
      - test:
          name: Run Tests - python 3.8
          executor_name: python38
          context: snyk-security-rnd
      - prodsec/secrets-scan:
          name: Scan repository for secrets
          trusted-branch: main
          context:
            - snyk-bot-slack
          channel: sec-eng-deployments
      - security-scans:
          name: Security Scans
          context:
            - analysis_security_intelligence
            - snyk-security-rnd
  release:
    jobs:
      - build_and_release:
          name: Build and Release a new version to PyPI
          filters:
            # ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # Only run when a semver is tagged
            tags:
              only: /^\d+\.\d+\.\d+$/